package com.grameenphone.wipro.fmfs.cbp.filter;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.util.matcher.RequestMatcher;
import org.springframework.web.filter.GenericFilterBean;

import com.grameenphone.wipro.fmfs.cbp.Application;
import com.grameenphone.wipro.fmfs.cbp.config.SecurityConfig;
import com.grameenphone.wipro.fmfs.cbp.consts.RequestAttribute;
import com.grameenphone.wipro.fmfs.cbp.service.AuthService;
import com.grameenphone.wipro.utility.common.StringUtil;
import com.onelogin.saml2.Auth;
import com.onelogin.saml2.settings.Saml2Settings;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

public class SAMLLogoutFilter extends GenericFilterBean {
    protected static final Logger log = LoggerFactory.getLogger(SAMLLogoutFilter.class);
    private RequestMatcher samlLogoutUrl = new AntPathRequestMatcher(SecurityConfig.logoutUrl);

    String autoLoginId;
    AuthService authService;
    Saml2Settings saml2Settings;
    String samlCallbackUrl;

    static String basePathPrefix = Application.environment.getProperty("app.context");

    public SAMLLogoutFilter(Saml2Settings saml2Settings, String samlCallbackUrl, AuthService authService, String autoLoginId) {
        this.autoLoginId = autoLoginId;
        this.authService = authService;
        this.saml2Settings = saml2Settings;
        this.samlCallbackUrl = samlCallbackUrl;
    }

    /**
     * Auth generated by reflection - two classloader loading conflict arising
     * @param request
     * @param response
     * @return
     * @throws NoSuchMethodException
     * @throws InvocationTargetException
     * @throws InstantiationException
     * @throws IllegalAccessException
     * @throws ClassNotFoundException
     */
    private Auth getJakartaCompatibleAuth(HttpServletRequest request, HttpServletResponse response) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException {
        Class jakartaResponseInterface = Auth.class.getClassLoader().loadClass("javax.servlet.http.HttpServletResponse");
        Class jakartaResponseClass = Auth.class.getClassLoader().loadClass("javax.servlet.http.HttpServletResponseImpl");
        Object jakartaResponse = jakartaResponseClass.getConstructor(HttpServletResponse.class).newInstance(response);
        Class jakartaRequestInterface = Auth.class.getClassLoader().loadClass("javax.servlet.http.HttpServletRequest");
        Class jakartaRequestClass = Auth.class.getClassLoader().loadClass("javax.servlet.http.HttpServletRequestImpl");
        Object jakartaRequest = jakartaRequestClass.getConstructor(HttpServletRequest.class).newInstance(request);
        return Auth.class.getConstructor(Saml2Settings.class, jakartaRequestInterface, jakartaResponseInterface).newInstance(saml2Settings, jakartaRequest, jakartaResponse);
    }

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        if(!samlLogoutUrl.matches((HttpServletRequest) request)) {
            chain.doFilter(request, response);
            return;
        }
        if(StringUtil.hasText(autoLoginId)) { //local test login enabled or no user currently logged
            HttpSession session = ((HttpServletRequest) request).getSession();
            if(session != null) {
                session.invalidate();
            }
            String context = basePathPrefix == null ? ((HttpServletRequest) request).getContextPath() : basePathPrefix;
            ((HttpServletResponse) response).sendRedirect(context + ("/".equals(context) ? "" : "/"));
            return;
        }
        try {
            Auth auth = getJakartaCompatibleAuth((HttpServletRequest)request, (HttpServletResponse)response);
            if (request.getParameter("SAMLResponse") == null && request.getParameter("SAMLRequest") == null) {
                auth.logout(samlCallbackUrl);
            } else {
                try {
                    auth.processSLO(true, null);
                } catch(Throwable ignored) {
                }
                if(auth.getErrors().isEmpty()) {
                    authService.logout();
                    if (request.getParameter("SAMLResponse") != null) {
                        auth.login(samlCallbackUrl);
                    }
                } else {
                    throw new Exception("Could not perform logout operation");
                }
            }
        } catch (Exception var9) {
            request.setAttribute(RequestAttribute.FILTER_EXCEPTION, var9);
            chain.doFilter(request, response);
        }
    }
}